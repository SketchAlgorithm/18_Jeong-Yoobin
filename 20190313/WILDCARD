package _190306;

import java.io.*;
import java.util.*;

public class WILDCARD {

	static HashMap<String, Boolean> cache;

	public static void main(String[] args) {

		FastScanner sc = new FastScanner();

		// ? : 어떤 글자든 ㄱㅊ , * : 어떤 문자열이든 ㄱㅊ(길이 0도 허용)

		int testcase = sc.nextInt();
		for (int t = 0; t < testcase; t++) {
			cache = new HashMap<String, Boolean>();
			String wildcard = sc.next();
			int wnum = sc.nextInt();
			ArrayList<String> list = new ArrayList<String>();
			for (int i = 0; i < wnum; i++)
				list.add(sc.next());

			for (int i = 0; i < list.size(); i++)
				if (!isPossible(wildcard, list.get(i))) {
					list.remove(i);
					i--;
				}
			list.sort(new Comparator<String>() {

				@Override
				public int compare(String arg0, String arg1) {
					int res = String.CASE_INSENSITIVE_ORDER.compare(arg0, arg1);
					if (res == 0)
						res = arg0.compareTo(arg1);
					return res;
				}
			});
			for (int i = 0; i < list.size(); i++)
				System.out.println(list.get(i));

		}

	}

	static boolean isPossible(String wildcard, String temp) {
		if(wildcard.length() == 0 || temp.length() == 0)
			return false;
		if (cache.containsKey(temp))
			return cache.get(temp);
		if (wildcard.equals(temp)) {
			cache.put(temp, true);
			return true;
		} else if (wildcard.charAt(wildcard.length() - 1) == temp.charAt(temp.length() - 1))
			return isPossible(wildcard.substring(0, wildcard.length() - 1), temp.substring(0, temp.length() - 1));
		else if (wildcard.charAt(wildcard.length() - 1) == '*') {
			if(wildcard.length() == 1)
				return true;
			for (int i = 0; i < wildcard.length(); i++)
				if (isPossible(wildcard.substring(0, wildcard.length() - 1),
						temp.substring(0, wildcard.length() - i))) {
					cache.put(temp, true);
					return true;
				}
			cache.put(temp, false);
			return false;
		} else if (wildcard.charAt(wildcard.length() - 1) == '?') {
			if(wildcard.length() == 1)
				return true;
			boolean flag = isPossible(wildcard.substring(0, wildcard.length() - 1),
					temp.substring(0, temp.length() - 1));
			cache.put(temp, false);
			return flag;
		} else
			cache.put(temp, false);
		return false;
	}

	static class FastScanner {
		BufferedReader in;
		StringTokenizer st;

		public FastScanner() {
			in = new BufferedReader(new InputStreamReader(System.in));
		}

		public String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					String temp = in.readLine();
					if (temp == null)
						return null;
					st = new StringTokenizer(temp);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

	}

}
